{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/RTW3-Week7-NFT-Marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/workspace/RTW3-Week7-NFT-Marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";//require('dotenv').config();\nvar key=process.env.REACT_APP_PINATA_KEY;var secret=process.env.REACT_APP_PINATA_SECRET;var axios=require('axios');var FormData=require('form-data');export var uploadJSONToIPFS=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(JSONBody){var url;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"https://api.pinata.cloud/pinning/pinJSONToIPFS\";//making axios POST request to Pinata ⬇️\nreturn _context.abrupt(\"return\",axios.post(url,JSONBody,{headers:{pinata_api_key:key,pinata_secret_api_key:secret}}).then(function(response){return{success:true,pinataURL:\"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash};}).catch(function(error){console.log(error);return{success:false,message:error.message};}));case 2:case\"end\":return _context.stop();}}},_callee);}));return function uploadJSONToIPFS(_x){return _ref.apply(this,arguments);};}();export var uploadFileToIPFS=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file){var url,data,metadata,pinataOptions;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url=\"https://api.pinata.cloud/pinning/pinFileToIPFS\";//making axios POST request to Pinata ⬇️\ndata=new FormData();data.append('file',file);metadata=JSON.stringify({name:'testname',keyvalues:{exampleKey:'exampleValue'}});data.append('pinataMetadata',metadata);//pinataOptions are optional\npinataOptions=JSON.stringify({cidVersion:0,customPinPolicy:{regions:[{id:'FRA1',desiredReplicationCount:1},{id:'NYC1',desiredReplicationCount:2}]}});data.append('pinataOptions',pinataOptions);return _context2.abrupt(\"return\",axios.post(url,data,{maxBodyLength:'Infinity',headers:{'Content-Type':\"multipart/form-data; boundary=\".concat(data._boundary),pinata_api_key:key,pinata_secret_api_key:secret}}).then(function(response){console.log(\"image uploaded\",response.data.IpfsHash);return{success:true,pinataURL:\"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash};}).catch(function(error){console.log(error);return{success:false,message:error.message};}));case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function uploadFileToIPFS(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"names":["key","process","env","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","require","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","metadata","JSON","stringify","name","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary"],"sources":["/workspace/RTW3-Week7-NFT-Marketplace/src/pinata.js"],"sourcesContent":["//require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios');\nconst FormData = require('form-data');\n\nexport const uploadJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};\n\nexport const uploadFileToIPFS = async(file) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    \n    let data = new FormData();\n    data.append('file', file);\n\n    const metadata = JSON.stringify({\n        name: 'testname',\n        keyvalues: {\n            exampleKey: 'exampleValue'\n        }\n    });\n    data.append('pinataMetadata', metadata);\n\n    //pinataOptions are optional\n    const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n            regions: [\n                {\n                    id: 'FRA1',\n                    desiredReplicationCount: 1\n                },\n                {\n                    id: 'NYC1',\n                    desiredReplicationCount: 2\n                }\n            ]\n        }\n    });\n    data.append('pinataOptions', pinataOptions);\n\n    return axios \n        .post(url, data, {\n            maxBodyLength: 'Infinity',\n            headers: {\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n            console.log(\"image uploaded\", response.data.IpfsHash)\n            return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};"],"mappings":"sQAAA;AACA,GAAMA,IAAG,CAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAxB,CACA,GAAMC,OAAM,CAAGH,OAAO,CAACC,GAAR,CAAYG,uBAA3B,CAEA,GAAMC,MAAK,CAAGC,OAAO,CAAC,OAAD,CAArB,CACA,GAAMC,SAAQ,CAAGD,OAAO,CAAC,WAAD,CAAxB,CAEA,MAAO,IAAME,iBAAgB,4FAAG,iBAAMC,QAAN,4HACtBC,GADsB,kDAE5B;AAF4B,gCAGrBL,KAAK,CACPM,IADE,CACGD,GADH,CACQD,QADR,CACkB,CACjBG,OAAO,CAAE,CACLC,cAAc,CAAEd,GADX,CAELe,qBAAqB,CAAEX,MAFlB,CADQ,CADlB,EAOFY,IAPE,CAOG,SAAUC,QAAV,CAAoB,CACvB,MAAO,CACHC,OAAO,CAAE,IADN,CAEHC,SAAS,CAAE,qCAAuCF,QAAQ,CAACG,IAAT,CAAcC,QAF7D,CAAP,CAIF,CAZE,EAaFC,KAbE,CAaI,SAAUC,KAAV,CAAiB,CACpBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAO,CACHL,OAAO,CAAE,KADN,CAEHQ,OAAO,CAAEH,KAAK,CAACG,OAFZ,CAAP,CAKP,CApBM,CAHqB,wDAAH,kBAAhBjB,iBAAgB,4CAAtB,CA0BP,MAAO,IAAMkB,iBAAgB,6FAAG,kBAAMC,IAAN,4JACtBjB,GADsB,kDAE5B;AAEIS,IAJwB,CAIjB,GAAIZ,SAAJ,EAJiB,CAK5BY,IAAI,CAACS,MAAL,CAAY,MAAZ,CAAoBD,IAApB,EAEME,QAPsB,CAOXC,IAAI,CAACC,SAAL,CAAe,CAC5BC,IAAI,CAAE,UADsB,CAE5BC,SAAS,CAAE,CACPC,UAAU,CAAE,cADL,CAFiB,CAAf,CAPW,CAa5Bf,IAAI,CAACS,MAAL,CAAY,gBAAZ,CAA8BC,QAA9B,EAEA;AACMM,aAhBsB,CAgBNL,IAAI,CAACC,SAAL,CAAe,CACjCK,UAAU,CAAE,CADqB,CAEjCC,eAAe,CAAE,CACbC,OAAO,CAAE,CACL,CACIC,EAAE,CAAE,MADR,CAEIC,uBAAuB,CAAE,CAF7B,CADK,CAKL,CACID,EAAE,CAAE,MADR,CAEIC,uBAAuB,CAAE,CAF7B,CALK,CADI,CAFgB,CAAf,CAhBM,CA+B5BrB,IAAI,CAACS,MAAL,CAAY,eAAZ,CAA6BO,aAA7B,EA/B4B,iCAiCrB9B,KAAK,CACPM,IADE,CACGD,GADH,CACQS,IADR,CACc,CACbsB,aAAa,CAAE,UADF,CAEb7B,OAAO,CAAE,CACL,uDAAiDO,IAAI,CAACuB,SAAtD,CADK,CAEL7B,cAAc,CAAEd,GAFX,CAGLe,qBAAqB,CAAEX,MAHlB,CAFI,CADd,EASFY,IATE,CASG,SAAUC,QAAV,CAAoB,CACtBO,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BR,QAAQ,CAACG,IAAT,CAAcC,QAA5C,EACA,MAAO,CACJH,OAAO,CAAE,IADL,CAEJC,SAAS,CAAE,qCAAuCF,QAAQ,CAACG,IAAT,CAAcC,QAF5D,CAAP,CAIH,CAfE,EAgBFC,KAhBE,CAgBI,SAAUC,KAAV,CAAiB,CACpBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAO,CACHL,OAAO,CAAE,KADN,CAEHQ,OAAO,CAAEH,KAAK,CAACG,OAFZ,CAAP,CAKP,CAvBM,CAjCqB,0DAAH,kBAAhBC,iBAAgB,8CAAtB"},"metadata":{},"sourceType":"module"}